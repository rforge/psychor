n <- 20
x <- sort(runif(n, -1, 1))
y <- -1 + x^2 + x^3 + rnorm(n, 0, 0.1)
plot(x, y)
k <- 3
br <- x#quantile(x)
bsplineBasis(x, k, br)
difmat <- function (n) {
m1 <- ifelse(outer(1:(n - 1),1:n,"-") == -1, 1, 0)
m2 <- ifelse(outer(1:(n - 1),1:n,"-") == 0,-1, 0)
return (m1 + m2)
}
bsplineBasis <- function (x, k, br) {
nrw <- length(x)
nbr <- length(br)
nrs <- k + nbr - 2
g <- matrix (0, nrw, nrs)
for (i in 1:nrw)
g[i,] <-
.C(
"BSPLINE",as.double(x[i]),as.integer(k),as.integer(nbr),as.double(br),results = as.double(rep(0.0,nrs))
)$results
return (g[,which(colSums(g) > 0)])
}
mregnn <- function (x, y, a = difmat (nrow (x))) {
pa <- - lm.fit (x, t(a))$fitted.values
pb <- drop(lm.fit (x, y)$fitted.values)
lb <- nnls(pa, y)$x
xb <- pb - drop(pa %*% lb)
return (list(xb = xb,lb = lb,f = sum((y - xb) ^ 2)))
}
plot(x, y)
fm1 <- lm(y ~ bs(x, df = 5))
ht <- seq(-1, 1, length.out = 200)
bsb <- bs(x, df = 5)
fm1 <- lm(y ~ bs(x, df = 5))
ht <- seq(-1, 1, length.out = 200)
lines(ht, predict(fm1, data.frame(x = ht)))
?bs
br <- quantile(x)
bsb <- bs(x, knots = br, degree = 3)
fm1 <- lm(y ~ bs(x, df = 5))
ht <- seq(-1, 1, length.out = 200)
lines(ht, predict(fm1, data.frame(x = ht)))
bsb <- bs(x, knots = br, degree = k)
bsb
bsb <- bsplineBasis(x, k, br)
bsb
fitted(fm1)
lines(x, fitted(fm1))
bsb <- bs(x, knots = br, degree = k)
fm1 <- lm(y ~ bs(x, df = 5))
lines(x, fitted(fm1))
plot(x, y)
bsb <- bs(x, knots = br, degree = k)
fm1 <- lm(y ~ bs(x, df = 5))
lines(x, fitted(fm1))
fm2 <- mregnn(x, y, a = difmat(nrow (x)))
x <- as.matrix(x)
x
fm2 <- mregnn(x, y, a = difmat(nrow(x)))
fm2$xb
lines(x, fm2$xb)
fm2$lb
bsb
fm2 <- mregnn(bsb, y, a = difmat(nrow(x)))
bsb <- bsplineBasis(x, k, br)
bsb
fm2 <- mregnn(bsb, y, a = difmat(nrow(x)))
fm2$xb
lines(x, fm2$xb)
fm2$lb
?splinefun
x = c(0,1,2,3,4,5,6)
y = c(2,1, 0.59, 0.27, 0.25, -0.23, -0.45)
plot(x, y)
bsb <- bs(x, knots = br, degree = k)
fm1 <- lm(y ~ bs(x, df = 5))
lines(x, fitted(fm1))
ht <- seq(-1, 1, length.out = 200)
lines(ht, predict(fm1, data.frame(x = ht)))
ht <- seq(range(x), length.out = 200)
seq(min(x), max(x), seq.len = 50)
?seq
seq(min(x), max(x), length.out = 50)
xx <- seq(min(x), max(x), length.out = 50)
lines(xx, fitted(fm1))
xx <- seq(min(x), max(x), length.out = length(x))
lines(xx, fitted(fm1))
x <- sort(runif(n, -1, 1))
set.seed(123)
n <- 20
x <- sort(runif(n, -1, 1))
y <- x^2 + x^3 + rnorm(n, 0, 0.1)
plot(x, y)
set.seed(123)
n <- 20
x <- sort(runif(n, -1, 1))
y <- x + x^2 + x^3 + rnorm(n, 0, 0.1)
set.seed(123)
n <- 20
x <- sort(runif(n, -1, 1))
y <- x^3
plot(x, y)
y <- x + x^2 + x^3 + rnorm(n, 0, 0.1)
plot(x, y)
set.seed(123)
n <- 20
x <- sort(runif(n, -1, 1))
y <- x^2 + x^3 + rnorm(n, 0, 0.1)
plot(x, y)
k <- 3
br <- quantile(x)
bsb <- bs(x, knots = br, degree = k)
fm1 <- lm(y ~ bs(x, df = 5))
xx <- seq(min(x), max(x), length.out = length(x))
lines(xx, fitted(fm1))
??bs
?bs
length(women$height)
plot(x, y)
bsb <- bsplineBasis(x, k, br)
fm2 <- mregnn(bsb, y, a = difmat(nrow(x)))
x <- sort(runif(n, -1, 1))
set.seed(123)
n <- 20
x <- sort(runif(n, -1, 1))
y <- x^2 + x^3 + rnorm(n, 0, 0.1)
k <- 3
br <- quantile(x)
bsb <- bsplineBasis(x, k, br)
fm2 <- mregnn(bsb, y, a = difmat(nrow(x)))
bsb
k
br
y
difmat(nrow(x))
difmat <- function (n) {
m1 <- ifelse(outer(1:(n - 1),1:n,"-") == -1, 1, 0)
m2 <- ifelse(outer(1:(n - 1),1:n,"-") == 0,-1, 0)
return (m1 + m2)
}
fm2 <- mregnn(bsb, y, a = difmat(nrow(x)))
x
difmat(nrow(bsb))
fm2 <- mregnn(bsb, y, a = difmat(nrow(bsb)))
fm2$xb
lines(x, fm2$xb)
difmat <- function (n) {
m1 <- ifelse(outer(1:(n - 1),1:n,"-") == -1, 1, 0)
m2 <- ifelse(outer(1:(n - 1),1:n,"-") == 0,-1, 0)
return (m1 + m2)
}
?bs
k <- 1
br <- quantile(x)
bsb <- bsplineBasis(x, k, br)
fm2 <- mregnn(bsb, y, a = difmat(nrow(bsb)))
fm2$xb
lines(x, fm2$xb)
fm2$lb
k <- 2
br <- quantile(x)
bsb <- bsplineBasis(x, k, br)
fm2 <- mregnn(bsb, y, a = difmat(nrow(bsb)))
fm2$xb
lines(x, fm2$xb)
k <- 3
br <- quantile(x)
bsb <- bsplineBasis(x, k, br)
fm2 <- mregnn(bsb, y, a = difmat(nrow(bsb)))
fm2$xb
plot(x, y)
lines(x, fm2$xb)
fm2$lb
k <- 4
br <- quantile(x)
bsb <- bsplineBasis(x, k, br)
fm2 <- mregnn(bsb, y, a = difmat(nrow(bsb)))
fm2$xb
lines(x, fm2$xb)
k <- 5
br <- quantile(x)
bsb <- bsplineBasis(x, k, br)
fm2 <- mregnn(bsb, y, a = difmat(nrow(bsb)))
fm2$xb
plot(x, y)
lines(x, fm2$xb)
k <- 10
br <- quantile(x)
bsb <- bsplineBasis(x, k, br)
fm2 <- mregnn(bsb, y, a = difmat(nrow(bsb)))
fm2$xb
lines(x, fm2$xb)
k <- 1
k <- 2
br <- quantile(x)
bsb <- bsplineBasis(x, k, br)
fm2 <- mregnn(bsb, y, a = difmat(nrow(bsb)))
fm2$xb
lines(x, fm2$xb)
k <- 3
br <- quantile(x)
bsb <- bs(x, knots = br, degree = k)
fm1 <- lm(y ~ bs(x, df = 5))
xx <- seq(-1, 1), length.out = length(x))
k <- 3
br <- quantile(x)
bsb <- bs(x, knots = br, degree = k)
fm1 <- lm(y ~ bs(x, df = 5))
xx <- seq(-1, 1, length.out = length(x))
plot(x, y)
lines(xx, fitted(fm1))
k <- 1
br <- quantile(x)
bsb <- bs(x, knots = br, degree = k)
fm1 <- lm(y ~ bs(x, df = 5))
xx <- seq(-1, 1, length.out = length(x))
plot(x, y)
lines(xx, fitted(fm1))
k <- 10
br <- quantile(x)
bsb <- bs(x, knots = br, degree = k)
fm1 <- lm(y ~ bs(x, df = 5))
xx <- seq(-1, 1, length.out = length(x))
lines(xx, fitted(fm1))
k <- 2
br <- quantile(x)
bsb <- bs(x, knots = br, degree = k)
fm1 <- lm(y ~ bs(x, df = 5))
plot(x, y)
lines(xx, fitted(fm1))
k <- 5
br <- quantile(x)
bsb <- bs(x, knots = br, degree = k)
k <- 5
br <- quantile(x)
bsb <- bs(x, knots = br, degree = k)
fm1 <- lm(y ~ bsb)
plot(x, y)
lines(xx, fitted(fm1))
lines(x, fitted(fm1))
fitted(fm1)
x
length(x)
?nnls
?quantile
knots <- 4
probs = seq(0, 1, 1/knots)
probs
probs = seq(0, 1, 1/knots)
seq(0, 1, 0.25)
knots = 3
seq(0, 1, 1/knots)
quantile(x, seq(0, 1, 1/knots))
quantile(x)
k <- 2
br <- quantile(x)
bsb <- bsplineBasis(x, k, br)
bsb
range(x)
bsb <- function (x, order, knots) {
if (length(knots) == 1) knots <- quantile(x, probs = seq(0, 1, 1/knots))
nrw <- length(x)
nbr <- length(knots)
nrs <- order + nbr - 2
g <- matrix (0, nrw, nrs)
for (i in 1:nrw)
g[i,] <- .C("BSPLINE",as.double(x[i]),as.integer(order),as.integer(nbr),as.double(knots),results = as.double(rep(0.0,nrs)))$results
return (g[,which(colSums(g) > 0)])
}
bsbb <- bsb(x, k, br)
fm2 <- mregnn(bsbb, y, a = difmat(nrow(bsb)))
fm2 <- mregnn(bsbb, y, a = difmat(nrow(bsbb)))
?splinefun
?splinefun
?bs
difmat(nrow(bsbb))
?bs
?splinefun
splinefun
?splinefun
splinefun(x., y.)
xx <- splinefun(x., y.)
xx
splinefun
xx
k <- 2
br <- quantile(x)
bsbb <- bsb(x, k, br)
source('~/Desktop/psychor/pkg/Gifi/R/bsb.R')
source('~/Desktop/psychor/pkg/Gifi/R/difmat.R')
n <- 9
x <- 1:n
y <- rnorm(n)
xx <- spline(x, y)
xx
bsb1
bsbb
source('~/Desktop/psychor/pkg/Gifi/R/bsb.R')
set.seed(123)
n <- 20
x <- sort(runif(n, -1, 1))
y <- x^3 + rnorm(n, 0, 0.1)
plot(x, y)
set.seed(123)
n <- 20
x <- sort(runif(n, -1, 1))
y <- 2*x^3 + rnorm(n, 0, 0.1)
plot(x, y)
set.seed(123)
n <- 20
x <- sort(runif(n, -1, 1))
y <- 0.5*x^3 + rnorm(n, 0, 0.1)
plot(x, y)
set.seed(123)
n <- 20
x <- sort(runif(n, -1, 1))
y <- x^3 + rnorm(n, 0, 0.1)
plot(x, y)
set.seed(123)
n <- 20
x <- sort(runif(n, -1, 1))     ## predictor
y <- x^3 + rnorm(n, 0, 0.1)    ## response
knots <- c(-0.5, 0 , 0.5)
bsplBasis <- bsb(x, knots)      ## B-spline basis
knots
x
min(x)
knots <- 4                     ## knots at quartiles
bsplBasis <- bsb(x, knots)     ## B-spline basis
bsplBasis
source('~/Desktop/psychor/pkg/Gifi/R/monspline.R')
fit <- monspline(y, bsplBasis$X) ## monotone B-spline
X
X <- bsplBasis$X
dim(X)
length(y)
X
a <- difmat(nrow(X))
a
pa <- - lm.fit(X, t(a))$fitted.values
pa
pb <- drop(lm.fit(X, y)$fitted.values)
pb
lb <- nnls(pa, y)$X
lb
nnls(pa, y)
lb <- nnls(pa, y)$x
Xb <- pb - drop(pa %*% lb)
Xb
source('~/Desktop/psychor/pkg/Gifi/R/monspline.R')
fit <- monspline(y, bsplBasis$X) ## monotone B-spline
source('~/Desktop/psychor/pkg/Gifi/R/monspline.R')
fit <- monspline(y, bsplBasis$X) ## monotone B-spline
fit$yhat
fit$RSS
drop(pa %*% lb)
pb
plot(x, y, pch = 19, main = "Monotone B-Spline")
lines(x, fit$yhat, lwd = 2, col = "cadet3")
plot(x, y, pch = 19, main = "Monotone B-Spline")
lines(x, fit$yhat, lwd = 2, col = "coral4")
abline(v = bsplBasis$knots)
knots <- 4                     ## knots at quartiles
bsplBasis <- bsb(x, knots, degree = 10)     ## B-spline basis
knots <- 4                     ## knots at quartiles
bsplBasis <- bsb(x, knots, order = 10)     ## B-spline basis
bsplBasis
fit <- monspline(y, bsplBasis$X) ## monotone B-spline
fit$RSS
plot(x, y, pch = 19, main = "Monotone B-Spline")
lines(x, fit$yhat, lwd = 2, col = "coral4")
plot(x, y, pch = 19, main = "Monotone B-Spline")
lines(x, fit$yhat, lwd = 2, col = "coral4")
abline(h = bsplBasis$knots, col = "lightgray", lty = 2)
plot(x, y, pch = 19, main = "Monotone B-Spline")
lines(x, fit$yhat, lwd = 2, col = "coral4")
abline(v = bsplBasis$knots, col = "lightgray", lty = 2)
knots <- 4                     ## knots at quartiles
bsplBasis <- bsb(x, knots)     ## B-spline basis
fit <- monspline(y, bsplBasis$X) ## monotone B-spline
fit$RSS
plot(x, y, pch = 19, main = "Monotone B-Spline")
lines(x, fit$yhat, lwd = 2, col = "coral4")
abline(v = bsplBasis$knots, col = "lightgray", lty = 2)
require(nnls)
?nnls
require(R.utils)
require(MASS)
sourceDirectory("/home/patrick/Desktop/psychor/pkg/Gifi/R")
load("/home/patrick/Desktop/psychor/pkg/Gifi/data/ABC.rda")
dyn.load("/home/patrick/Desktop/psychor/pkg/smacof/src/smacof.so")
dyn.load("/home/patrick/Files/Eigene Papers/Scaling/Gifi/JanCode/bspline.so")
as.numeric.factor <- function(x) as.numeric(levels(x))[x]
ABC6m <- sapply(ABC6, as.numeric.factor)
ABC6 <- ABC[,6:11]
as.numeric.factor <- function(x) as.numeric(levels(x))[x]
ABC6m <- sapply(ABC6, as.numeric.factor)
require(knitr)
getwd()
setwd('/home/patrick/Desktop/psychor/pkg/Gifi/vignettes')
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
knit2pdf("Gifi.Rnw")
?princomp
xx <- princomp(USArrests, cor = TRUE)
xx
names(xx)
xx$loadings
R <- cor(USArrests)
eigen(R)
require(Matrix)
rankMatrix(R$vectors)
E <- eigen(R)
rankMatrix(E$vectors)
load("/home/patrick/Files/Eigene Papers/Scaling/Gifi/Rcode/fit.rda")
m <- ncol(fit$scoremat[,,1])   ## number of variables
n <- nrow(fit$scoremat[,,1])   ## number of subjects
X <- fit$objscores    ## object scores
t(X) %*% X            ## normalized to 1/m
Xn <- X * sqrt(n*m)   ## normalize such that X'X = nI
t(Xn) %*% Xn          ## ok
G1 <- fit$ind.mat[, 1:5]     ## indicator matrix for 1st variable
D1 <- crossprod(G1)
y1 <- fit$catscores[[1]]     ## category scores first variable
t(y1) %*% D1 %*% y1          ## what we have at the moment
G1 <- fit$ind.mat[, 1:5]     ## indicator matrix for 1st variable
D1 <- crossprod(G1)
y1 <- fit$catscores[[1]]     ## category scores first variable
t(y1) %*% D1 %*% y1          ## what we have at the moment
solve(t(y1) %*% D1 %*% y1)
D1
ginv(t(y1) %*% D1 %*% y1)
ginv(t(y1) %*% D1 %*% y1)
t(y1) %*% D1 %*% y1          ## what we have at the moment
USArrests
?USArrests
n <- nrow(USArrests)
PCAfit <- princomp(covmat = cov(USArrests))
PCAfit
evArrests <- eigen(cov(USArrests))
evArrests$values         ## variances
sqrt(evArrests$values)   ## variances
svdArrests <- svd(scale(USArrests, scale = FALSE)/sqrt(n-1))
svdArrests$d
evArrests <- eigen(cov(USArrests))
evArrests$values         ## variances
svdArrests <- svd(scale(USArrests, scale = FALSE)/sqrt(n-1))
svdArrests$d
evArrests <- eigen(cov(USArrests))
evArrests$values         ## variances
sqrt(evArrests$values)   ## variances
PCAfit <- princomp(covmat = cov(USArrests))
PCAfit
svdArrests
evArrests$u
svdArrests$u
names(PCAfit)
PCAfit$scores
str(PCAfit)
?princmop
?princomp
PCAfit <- princomp(covmat = cov(USArrests), scores = TRUE)
PCAfit
PCAfit$scores
xx <- princomp(USArrests, cor = TRUE)
xx$scores
xx <- princomp(USArrests, cor = FALSE)
xx$scores
svdArrests
svdArrests$u %*% svdArrests$d
PCAfit <- princomp(covmat = cor(USArrests))
PCAfit
PCAfit <- princomp(covmat = cov(USArrests))
PCAfit
PCAfit <- princomp(covmat = cov(scale(USArrests)))
PCAfit
PCAfit <- princomp(covmat = cov(USArrests))
PCAfit
evArrests <- eigen(cov(USArrests))
evArrests$values         ## variances
sqrt(evArrests$values)   ## variances
svdArrests <- svd(scale(USArrests, scale = FALSE)/sqrt(n-1))
svdArrests$d
svdArrests$u %*% svdArrests$d
xx$scores
svdArrests$u
svdArrests$u %*% t(svdArrests$d)
svdArrests$u %*% svdArrests$d
svdArrests$u %*% diag(svdArrests$d)
xx$scores
evArrests <- eigen(cov(USArrests))
evArrests
svdArrests$u %*% sqrt(diag(svdArrests$d))
xx$scores
pc.cr <- princomp(USArrests, cor = TRUE)
pc.cr$scores
svdArrests$u %*% sqrt(diag(svdArrests$d))
